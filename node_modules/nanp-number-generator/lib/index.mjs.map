{"version":3,"sources":["../src/consts.ts","../src/validate/area-code.ts","../src/validate/central-office-code.ts","../src/validate/line-number.ts","../src/generate/area-code.ts","../src/generate/central-office-code.ts","../src/generate/line-number.ts","../src/generate/nanp-number.ts"],"sourcesContent":["// luckily using a list of existing area codes is a lot easier than generating a random valid one\nexport const AREA_CODES: number[] = [\n\t201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217,\n\t218, 219, 220, 223, 224, 225, 228, 229, 231, 234, 239, 240, 248, 251, 252,\n\t253, 254, 256, 260, 262, 267, 269, 270, 272, 276, 279, 281, 301, 302, 303,\n\t304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320,\n\t321, 323, 325, 326, 330, 331, 332, 334, 336, 337, 339, 340, 341, 346, 347,\n\t350, 351, 352, 360, 361, 363, 364, 380, 385, 386, 401, 402, 404, 405, 406,\n\t407, 408, 409, 410, 412, 413, 414, 415, 417, 419, 423, 424, 425, 430, 432,\n\t434, 435, 440, 442, 443, 445, 447, 448, 458, 463, 464, 469, 470, 472, 475,\n\t478, 479, 480, 484, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513,\n\t515, 516, 517, 518, 520, 530, 531, 534, 539, 540, 541, 551, 557, 559, 561,\n\t562, 563, 564, 567, 570, 571, 572, 573, 574, 575, 580, 582, 585, 586, 601,\n\t602, 603, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 617, 618, 619,\n\t620, 623, 626, 628, 629, 630, 631, 636, 640, 641, 646, 650, 651, 656, 657,\n\t659, 660, 661, 662, 667, 669, 670, 671, 678, 680, 681, 682, 684, 689, 701,\n\t702, 703, 704, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720,\n\t724, 725, 726, 727, 731, 732, 734, 737, 740, 743, 747, 754, 757, 760, 762,\n\t763, 765, 769, 770, 771, 772, 773, 774, 775, 779, 781, 785, 786, 787, 801,\n\t802, 803, 804, 805, 806, 808, 810, 812, 813, 814, 815, 816, 817, 818, 820,\n\t826, 828, 830, 831, 832, 835, 838, 839, 840, 843, 845, 847, 848, 850, 854,\n\t856, 857, 858, 859, 860, 862, 863, 864, 865, 870, 872, 878, 901, 903, 904,\n\t906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 925,\n\t928, 929, 930, 931, 934, 936, 937, 938, 939, 940, 941, 943, 945, 947, 948,\n\t949, 951, 952, 954, 956, 959, 970, 971, 972, 973, 978, 979, 980, 983, 984,\n\t985, 986, 989,\n];\n","import { AREA_CODES } from \"../consts\";\n\n/**\n * Validates area code\n * @param {string} code\n * @returns true if valid according to NANP\n */\nexport const validateAreaCode = (code: string) => {\n\tif (code.length !== 3) {\n\t\tthrow new Error(`Area code must be 3 digits`);\n\t}\n\tif (!AREA_CODES.find((areaCode) => areaCode.toString() === code)) {\n\t\tthrow new Error(`Area code must be a valid NANP area code`);\n\t}\n\treturn true;\n};\n","/**\n * Validates central office code\n * @param {string} code\n * @returns true if valid according to NANP\n */\nexport const validateCentralOfficeCode = (code: string) => {\n\tif (code.length !== 3) {\n\t\tthrow new Error(`Central office code must be 3 digits`);\n\t}\n\tconst digits = code.split(``);\n\t// doesn't start with 0 or 1\n\tif (digits[0] === `0` || digits[0] === `1`) {\n\t\tthrow new Error(`Central office code must not start with 0 or 1`);\n\t}\n\t// doesn't end with 11\n\tif (digits[1] === `1` && digits[2] === `1`) {\n\t\tthrow new Error(`Central office code must not end with 11`);\n\t}\n\t// if not false must be true\n\treturn true;\n};\n","// This one depends on the previous one\n// so a failure here isn't necessarily a failure of the code\n// as long as the previous number is 555, this should be valid regardless\n/**\n * Validates line number\n * @param {string} code\n * @returns true if valid according to NANP\n */\nexport const validateLineNumber = (code: string) => {\n\tif (code.length !== 4) {\n\t\tthrow new Error(`Line number must be 4 digits`);\n\t}\n\t// doesn't end with 0100-0199\n\tif (\n\t\tcode.startsWith(`01`)\n\t) {\n\t\tthrow new Error(`Line number must not end in range 0100-0199`);\n\t}\n\t// if not false must be true\n\treturn true;\n};\n","import { AREA_CODES } from \"../consts.js\";\nimport { validateAreaCode } from \"../validate/area-code.js\";\n\n/**\n * Generates an area code valid for the NANP\n * @returns a 3 digit string that:\n * - does not start with a 0 or a 1 (toll center/system codes)\n * - second digit cannot be 9\n * - ends in the range of 10-99 BUT\n * - does not end in 11 (service codes)\n *\n * - Easily Recognizable Codes:\n *   N11 - service codes\n *   N9X - expansion codes\n *   37X, 96X - set aside for future use\n *\n * @param {string} override - if provided, will return this value if it's valid\n * otherwise it'll throw an error\n */\nexport const generateAreaCode = (override?: string): string => {\n\tif (override) {\n\t\tif (validateAreaCode(override)) {\n\t\t\treturn override;\n\t\t}\n\t\t// if this package was really good, it would throw the exact reason it's invalid\n\t\tthrow new Error(`Invalid area code`);\n\t}\n\treturn AREA_CODES[Math.floor(Math.random() * AREA_CODES.length)].toString();\n};\n","import { validateCentralOfficeCode } from \"../validate/central-office-code\";\n\n/**\n * Generates a central office code valid for the NANP\n * @returns a 3 digit string that:\n * - does not start with a 0 or a 1\n * - does not end with 11\n * \n * @param {string} override - if provided, will return this value if it's valid\n * otherwise it'll throw an error\n */\nexport const generateCentralOfficeCode = (override?: string): string => {\n\tif (override) {\n\t\tif (validateCentralOfficeCode(override)) {\n\t\t\treturn override;\n\t\t}\n\t\tthrow new Error(`Invalid central office code`);\n\t}\n\tconst first = Math.floor(Math.random() * 8) + 2;\n\tconst second = Math.floor(Math.random() * 9);\n\tconst third = Math.floor(Math.random() * 9);\n\tif (second === 1 && third === 1) {\n\t\t// will recursion save the day?\n\t\treturn generateCentralOfficeCode();\n\t}\n\t// 555 case\n\tif (first === 5 && second === 5 && third === 5) {\n\t\t// if this is a 555 number, the next 4 can only be 01XX\n\t\t// later version should allow for 555-01XX,\n\t\t// right now just re-roll\n\t\treturn generateCentralOfficeCode();\n\t}\n\treturn `${first}${second}${third}`;\n};\n","import { validateLineNumber } from \"../validate/line-number\";\n\n/**\n * Generates a line number valid for the NANP\n * @param {boolean} fictionalize - if true, will generate a 01XX number\n * @returns a 4 digit string that:\n * - doesn't end between 0100-0199 UNLESS\n * - it's a 555 number (reserved for fictional numbers)\n * \n * @param {string} override - if provided, will return this value if it's valid\n * otherwise it'll throw an error\n */\nexport const generateLineNumber = (override?: string, fictionalize?: boolean): string => {\n\tif (override) {\n\t\tif (validateLineNumber(override)) {\n\t\t\treturn override;\n\t\t}\n\t\tthrow new Error(`Invalid line number`);\n\t}\n\t// torn between if I want this as a true/false\n\t// or if i just want it to be valid no matter what goes here\n\tif (typeof fictionalize !== `undefined`) {\n\t\t// return 01XX for 555 numbers\n\t\tconst third = Math.floor(Math.random() * 10);\n\t\tconst fourth = Math.floor(Math.random() * 10);\n\t\treturn `01${third}${fourth}`;\n\t}\n\tconst first = Math.floor(Math.random() * 10);\n\tconst second = Math.floor(Math.random() * 10);\n\tconst third = Math.floor(Math.random() * 10);\n\tconst fourth = Math.floor(Math.random() * 10);\n\tif (first === 0 && second === 1) {\n\t\t// re-roll\n\t\treturn generateLineNumber();\n\t}\n\treturn `${first}${second}${third}${fourth}`;\n};\n","import { validateAreaCode } from \"../validate/area-code\";\nimport { validateCentralOfficeCode } from \"../validate/central-office-code\";\nimport { validateLineNumber } from \"../validate/line-number\";\n\n// imports are sorted alphabetically!!!\n// eslint-disable-next-line sort-imports\nimport { generateAreaCode } from \"./area-code\";\nimport { generateCentralOfficeCode } from \"./central-office-code\";\nimport { generateLineNumber } from \"./line-number\";\n\ntype Options = {\n  areaCode?: string;\n  centralOfficeCode?: string;\n  lineNumber?: string;\n};\n\n/**\n * Generates a NANP number\n * \n * Add in ability to override the number's components\n * Add in ability to fictionalize the number with 555-01XX pattern\n */\nexport const generateNANPNumber = (options: boolean | Options) => {\n\tif (typeof options === `boolean`) {\n\t\tconst areaCode = generateAreaCode();\n\t\tconst centralOfficeCode = `555`;\n\t\tconst lineNumber = generateLineNumber(undefined, true);\n\t\treturn `${areaCode}${centralOfficeCode}${lineNumber}`;\n\t} else {\n\t\tlet { areaCode, centralOfficeCode, lineNumber } = options;\n\t\t// Area code will be assigned if not provided\n\t\tif (!areaCode || !validateAreaCode(areaCode)) {\n\t\t\tareaCode = generateAreaCode();\n\t\t}\n\t\t// Central office code will be assigned if not provided\n\t\tif (!centralOfficeCode || !validateCentralOfficeCode(centralOfficeCode)) {\n\t\t\tcentralOfficeCode = generateCentralOfficeCode();\n\t\t}\n\t\t// Line number will be assigned if not provided\n\t\tif (!lineNumber || !validateLineNumber(lineNumber)) {\n\t\t\tlineNumber = generateLineNumber();\n\t\t}\n\t\treturn `${areaCode}${centralOfficeCode}${lineNumber}`;\n\t}\n};"],"mappings":";AACO,IAAM,aAAuB;AAAA,EACnC;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EACtE;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EA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","names":["third","fourth"]}